#!/usr/bin/env guile
!#
(use-modules
 (guix packages)
 (ice-9 format)
 (ice-9 match)
 (ice-9 pretty-print)
 (srfi srfi-1)
 (srfi srfi-2)
 (srfi srfi-26)
 (web server)
 (web response)
 (web request)
 (web client)
 (web uri)
 ;; (mcron)
 (json)
 (gnu)
 (guix ui)
 (guix)
 (guix packages)
 (gnu packages)
 (guix records)
 (guix import json)
 (guix scripts search)
 (srfi srfi-9)
 (sxml simple))

(define %api-base-url
  "https://api.telegram.org")

(define %debug? #f)

;; (define-record-type* <tg-string> tg-string
;;   make-tg-string
;;   tg-string?
;;   this-tg-string
;;   (content tg-string-content
;;            (default "")))

(define-json-type <tg-user>
  (id)
  (bot? "is_bot")
  (first-name "first_name")
  (last-name "last_name")
  (username)
  (language-code "language_code"))

(define-json-type <tg-chat>
  (id "id")
  (type "type")
  ;; option
  (title tg-chat-title)
  (username tg-chat-username)
  (first-name "first_name")
  (last-name "last_name")
  ;;(photo "photo" <tg-chatphoto>)
  ;; (bio)
  ;; (description)
  ;; (invite-link)
  ;; (pinned-message "pinned_message" <tg-message>)
  ;; (permissions "permissions" <tg-chat-permissions>)
  ;; (slow-mode-delay "slow_mode_delay")
  ;; (message-auto-delete-time "message_auto_delete_time")
  ;; (sticker-set-name "sticker_set_name")
  ;; (can-set-sticker-set "can_set_sticker_set")
  ;; (linked-chat-id "linked_chat_id")
  ;;(location "location" <tg-chat-location>)
  )

(define-json-mapping <tg-message> make-tg-message
  tg-message?
  json->tg-message
  <=> tg-message->json
  <=> scm->tg-message
  <=> tg-message->scm
  (message-id tg-message-message-id "message_id")
  (from tg-message-from "from" json->tg-from)
  ;;(sender-chat "sender_chat" <tg-chat>)
  (date tg-message-date)
  (chat tg-message-chat "chat" json->tg-chat)
  ;;(forward-from tg-message-formward-from "forward_from" json->tg-user)
  (entities tg-message-entities "entities"
            (lambda (a)
              (and (vector? a)
                   (map json->tg-entities
                        (vector->list a)))))
  (text tg-message-text))

(define-json-type <tg-entities>
  (type)
  (length)
  (offset)
  ;;(user "user" <tg-user>)
  (url)
  (language))

(define-json-type <tg-from>
  (id)
  (language "language_code")
  (username)
  (first-name "first_name")
  (bot? "is_bot"))

(define (tg-lookup url)
  (and=>
   (false-if-exception (assoc-ref (json-fetch url) "result"))
   (match-lambda
     ;; (a a)
     (#((pat_1 update-id)) (cons (scm->tg-message (cdr pat_1)) (cdr update-id)
                                 ;; (car pat_1)
                                 ))
     (#() #f)
     (_ #f))))
(define %last-update-id #f)

(define (return-packages-info name)
  (if (string= "" name)
      "???"
      (let ((packages (apply find-packages-by-name (string-split name #\@))))
        (format #f "~{~a~%~%~}" (if (null? packages)
                                    (list (format #f "~a 查不到" name))
                                    (map
                                     (lambda (p)
                                       (call-with-output-string
                                         (cut package->recutils p <> 30)))
                                     packages))))))

(define* (get-method-url toke method . arg)
  (apply string-append %api-base-url "/bot" toke "/" method
         arg))

(define (get-command-name text offset length)
  (apply values (string-split (substring text offset (+ length offset)) #\@)))

(define* (send-message toke
                       #:key
                       chat-id
                       (allow-sending-without-reply #f)
                       reply-to-message-id
                       text)
  (json-fetch (get-method-url
               toke "sendMessage"
               "?"
               (format #f "~:{~a=~a&~}"
                       `(("chat_id" ,(number->string
                                      chat-id))
                         ("allow_sending_without_reply"
                          ,(scm->json-string allow-sending-without-reply))
                         ("reply_to_message_id"
                          ,(number->string reply-to-message-id))
                         ("text" ,(uri-encode
                                   text)))))))

(define (main1 toke)
  (and-let* ((out (tg-lookup (get-method-url toke "getUpdates" "?offset=-1")))
             (message (car out))
             (update-id (cdr out)))
    (match-let* ((($ <tg-message> message-id from date chat entities text) message))
      (unless (equal? %last-update-id update-id)
        (when (number? %last-update-id)
          (and=> entities
                 (cut for-each (match-lambda
                                 (($ <tg-entities> type length offset url language)
                                  (define command-value (car (string-split
                                                              (string-trim-both
                                                               (string-drop
                                                                text
                                                                (+ length offset)))
                                                              #\space)))
                                  (match type
                                    ("bot_command"
                                     (send-message toke
                                                   #:chat-id (tg-chat-id chat)
                                                   #:allow-sending-without-reply #t
                                                   #:reply-to-message-id message-id
                                                   #:text
                                                   (match (get-command-name text offset length)
                                                     ("/show"
                                                      (return-packages-info command-value))
                                                     (a (format #f "未知指令: ~a"a)))))
                                    (_ #f))
                                  (format #t "[update-id:~a] chat-id:~a user: ~S(~S) type: ~S~%"
                                          update-id
                                          (tg-chat-id chat)
                                          (tg-from-first-name from)
                                          (tg-from-username from)
                                          text)
                                  (when %debug?
                                    (format #t "\n---\n\n~@{~S\n~}\n---\n"
                                            message-id
                                            from
                                            date
                                            chat
                                            text
                                            type
                                            length
                                            offset
                                            url
                                            language
                                            message
                                            (string-split command #\@)
                                            command-value)))) <>)))
        (set! %last-update-id update-id)))))

(define (main)
  (while #t
    (main1 (second (program-arguments)))
    (sleep 1)))

(main)
;; Local Variables:
;; mode: scheme
;; End:
