#!/usr/bin/env guile
!#
(use-modules (irc irc)
             (irc handlers)
             ((irc message)
              #:prefix msg:)
             (srfi srfi-26)
             (srfi srfi-1)
             (srfi srfi-2)
             (ice-9 format)
             (ice-9 match)
             (ice-9 sandbox)
             (ice-9 regex)
             (gnu packages)
             (guix ui))
(define irc (make-irc #:nick "z-guix-irc-bot"
                      #:server "irc.libera.chat"
                      #:port 6697
                      #:ssl #t))

(define (return-packages-info name)
  (if (string= "" name)
      "???"
      (let ((packages (apply find-packages-by-name (string-split name #\@))))
        (format #f "~{~a~%~%~}" (if (null? packages)
                                    (list (format #f "~a 查不到" name))
                                    (map
                                     (lambda (p)
                                       (regexp-substitute/global
                                        #f
                                        "[\n]+"
                                        (call-with-output-string
                                          (cut package->recutils p <>))
                                        'pre " " 'post))
                                     packages))))))

(install-ping-handler! irc)

(define (string->230length-strings s)
  (let loop ((s s))
    (if (>= (string-length s ) 230)
        (cons (string-take s 230) (loop (string-drop s 230)))
        (list s))))

(define (eval-in-sandbox->string s)
  (let ((s (string-append "(values\n" s "\n)")))
    (call-with-values
        (lambda ()
          (let ((exp (catch #t
                       (lambda ()
                         (call-with-input-string s read))
                       (lambda args
                         (format #f (G_ "failed to read expression ~s: ~s~%")
                                 s args)))))
            (if (string? exp)
                exp
                (catch #t
                  (lambda ()
                    (eval-in-sandbox
                     exp
                     #:time-limit 100))
                  (lambda args
                    (format #f (G_ "failed to evaluate expression '~a':~%") exp)
                    (match args
                      (('syntax-error proc message properties form . rest)
                       (format #f (G_ "syntax error: ~a~%") message))
                      ((error args ...)
                       (apply format #f "error-> ~S" args))
                      (what? (apply format #f "unknow: ~{~S~}" args))))))))
      (lambda a (format #f "=> ~{~S~^ ~}"  a)))))

(add-simple-message-hook! irc
                          (lambda (msg)
                            (let* ((body (regexp-substitute/global
                                          #f "^\\[telegram\\] <.*> "
                                          (msg:trailing msg) 'post))
								   ;; (body (if (> (string-length body) 10)
								   ;; 			 (string-take body 10)
								   ;; 			 body))
								   )
                              (if (and (pk body)
									   ;;(string-prefix? "," body)
									   (pk (and=> (string-index body #\,) (cut > 3 <>)))
									   ;; (> 5 (or (string-index body #\,) 0))
									   )
                                  (let* ((item body)
										 (command-name (car (string-split item #\ )))
										 (command-body (or (false-if-exception
															(second (string-split item #\ ))) "")))
                                    (format #t "~@{ ~S ~}"
                                            body
											item
                                            command-name
                                            command-body
											(string-join (cdr (string-split item #\ )) " "))

                                    (match command-name
                                      (",help"
									   (do-privmsg irc (msg:parse-target msg)
                                                   (format #f "z-guix-irc-bot\n\nshow: \neval: \nhelp\n")))
									  (",show"
                                       (and=> (return-packages-info command-body)
                                              (lambda (a)
                                                (for-each (cut do-privmsg irc (msg:parse-target msg) <>)
                                                          (string->230length-strings a)))))
                                      (",eval"
                                       (let* ((a (string-join (cdr (string-split item #\ )) " ")))
                                         (for-each (cut do-privmsg irc (msg:parse-target msg) <>)
                                                   (string->230length-strings
                                                    (eval-in-sandbox->string a)))))
                                      (a (do-privmsg irc (msg:parse-target msg)
                                                     (format #f "未知指令: ~a" a))))))))
                          #:command 'PRIVMSG)
(install-printer! irc)
(do-connect irc)
(do-register irc)
(do-join irc "#guixcn")
(do-join irc "#guixcn-offtopic")
(do-runloop irc)
